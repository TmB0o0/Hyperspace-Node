#!/bin/bash

set -e  # Stop the script on errors

# Define colors
WHITE='\e[97m'
TEAL='\e[36m'
RESET='\e[0m'

# Variable for the last choice
last_choice="1"

# Function to install screen
install_screen() {
    if ! command -v screen &> /dev/null; then
        echo -e "${WHITE}Package 'screen' not found, starting installation...${RESET}"
        apt-get update && apt-get install -y screen
        echo -e "${WHITE}Package 'screen' successfully installed!${RESET}"
    else
        echo -e "${WHITE}Package 'screen' is already installed.${RESET}"
    fi
}

# Function to install node
install_node() {
    # Install screen if not already installed
    install_screen

    # Create a new screen session for starting the process
    screen -S hyperspace -dm bash -c "
    source /root/.bashrc
    aios-cli start  # Start the process in the screen session
    "
    if [ $? -eq 0 ]; then
        echo -e "${WHITE}Node installation process started in the background in the screen session named 'hyperspace'.${RESET}"
    else
        echo -e "${WHITE}Error starting the process in screen.${RESET}"
        exit 1
    fi

    # Continue in normal mode
    source /root/.bashrc
    aios-cli models add hf:TheBloke/phi-2-GGUF:phi-2.Q4_K_M.gguf
    echo -e "${WHITE}${RESET}"
    nano .pem
    aios-cli hive import-keys ./.pem
    aios-cli hive login
    aios-cli hive connect
    aios-cli hive select-tier 5
    aios-cli hive select-tier 3
    echo -e "${WHITE}Node successfully installed and connected!${RESET}"

    # Return to main menu
    sleep 2
    return_to_menu
}

# Function to check points
check_points() {
    aios-cli hive points
    # Return to main menu
    sleep 2
    return_to_menu
}

# Function to update the node
update_node() {
    aios-cli version
    # Return to main menu
    sleep 2
    return_to_menu
}

# Function to show logs through the screen session
show_logs() {
    # Check if the screen session "hyperspace" exists
    if screen -list | grep -q "hyperspace"; then
        echo -e "${WHITE}Connecting to the 'hyperspace' screen session to display logs:${RESET}"
        screen -r hyperspace  # Connect to the session
    else
        echo -e "${WHITE}Screen session named 'hyperspace' not found!${RESET}"
    fi

    # Return to main menu after exiting screen
    sleep 2
    return_to_menu
}

# Function to uninstall the node
uninstall_node() {
    read -p "Are you sure you want to uninstall the node? (y/N): " confirm
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        curl https://download.hyper.space/api/uninstall | bash
        # Return to main menu
        sleep 2
        return_to_menu
    else
        echo -e "${WHITE}Uninstallation canceled.${RESET}"
        # Return to main menu
        sleep 2
        return_to_menu
    fi
}

# Function to display the logo
show_logo() {
    echo -e "${TEAL}  ##  ###  #######  ######   #######  #######  #######  ######   #######  ##  ##   #######  ###### ${RESET}"
    echo -e "${TEAL}  ### ###  ##   ##  ##  ##   ##       ##         ###    ##  ##     ###    ##  ##   ##       ##  ## ${RESET}"
    echo -e "${TEAL}  #######  ##   ##  ##  ##   ##       #######    ###    ##  ##     ###    ## ##    ##       ##  ## ${RESET}"
    echo -e "${TEAL}  ## ####  ##  ###  ### ###  #######       ##    ###    #######    ###    #######  #######  ####### ${RESET}"
    echo -e "${TEAL}  ##  ###  ##  ###  ### ###  ###      ###  ##    ###    ### ###    ###    ##  ###  ###      ### ### ${RESET}"
    echo -e "${TEAL}  ##  ###  ##  ###  ### ###  # #      ###  ##    ###    ### ###    ###    ##  ###  # #      ### ### ${RESET}"
    echo -e "${TEAL}  ##  ###  #######  #######  #######  #######    ###    ### ###  #######  ##  ###  #######  ### ### ${RESET}"
}

# Function to return to the main menu
return_to_menu() {
    clear
    show_logo
    echo -e "\n${WHITE}Select an action:${RESET}"
    echo "1) Install node"
    echo "2) Check points"
    echo "3) Update node"
    echo "4) Show logs"
    echo "5) Uninstall node"
    echo "6) Exit"
    read -p "Enter the action number: " choice

    case $choice in
        1) install_node ;;
        2) check_points ;;
        3) update_node ;;
        4) show_logs ;;
        5) uninstall_node ;;
        6) exit 0 ;;
        *) echo -e "${WHITE}Invalid choice! Please try again.${RESET}"; sleep 2 ;;
    esac
}

# Main menu
while true; do
    return_to_menu
done
